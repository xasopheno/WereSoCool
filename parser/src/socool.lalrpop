use num_rational::{Rational64};
use std::str::FromStr;
use std::string::String;
use socool_ast::{
    ast::{
        ParseTable,
        Op,
        is_choice_op,
    },
};
use crate::parser::Init;
use crate::float_to_rational::helpers::*;
use crate::error_handling::handle_id_error;

grammar<'table, 'err>(
    table: &'table mut ParseTable,
);

pub SoCool: Init = {
  <init: Point>
  <l: LetDefs> => { init }
}

Point: Init = {
    "{"
         "f:" <f:Rational> ","
         "l:" <l:Rational> ","
         "g:" <g:Rational> ","
         "p:" <p:Rational>
    "}" ";"? => Init { f, l, g, p }
}

LetDefs = Lets<LetDef>;
LetDef: Op = {
    <s: Name> "=" "{" <o: Operation> "}" => { table.insert(s.clone(), o); Op::Id(s.clone()) },
}

Operation: Op = {
    <op1: Operation> ">" "FitLength" <op2: ComposeOperation> => Op::Compose { operations: vec![op1.clone(), Op::WithLengthRatioOf { with_length_of: Box::new(op2), main: Box::new(op1) }] },
    <op1: Operation> ">" "Repeat" <i: Int> => {
        let mut op = Op::AsIs;
        if is_choice_op(op1.clone()) {
            op = op1
        }
        let mut vec = Vec::new();
        for x in 0..i {
            vec.push(op.clone())
        }
        Op::Sequence { operations: vec }
    },
    <op: ComposeOperation> => op,
}

ComposeOperation: Op = {
    <ops: Pipe<BaseOperation>> => Op::Compose { operations: ops },
    <o: BaseOperation> => o,
}

BaseOperation: Op = {
    "(" <o: Operation> ")" => o,
    "AsIs" => Op::AsIs {},
    "Sine" => Op::Sine {},
    "Square" => Op::Square {},
    "Noise" => Op::Noise {},
    "Reverse" => Op::Reverse {},
    "Invert" => Op::FInvert,
    "Repeat" <i: Int> => {
        let mut vec = Vec::new();
        for x in 0..i {
            vec.push(Op::AsIs)
        }
        Op::Sequence { operations: vec }
    },
    "Silence" <v:Rational> => Op::Silence {m: v},
    "Tm" <v:Rational> => Op::TransposeM {m: v},
    "Ta" <v:Rational> => Op::TransposeA {a: v},
    "PanM" <v:Rational> => Op::PanM {m: v},
    "PanA" <v:Rational> => Op::PanA {a: v},
    "Length" <v:Rational> => Op::Length {m: v},
    "Gain" <v:Rational> => Op::Gain {m: v},
    "Choice" "[" <operations: Operations> "]" => Op::Choice { operations: operations },
    "Sequence" "[" <operations: Operations> "]" => Op::Sequence { operations: operations },
    "Overlay" "[" <operations: Operations> "]" => Op::Overlay { operations: operations },
    "ModulateBy" "[" <operations: Operations> "]" => Op::ModulateBy { operations: operations },
    "O" "[" <o: Overtones> "]" => Op::Overlay { operations: o },
    <id_vec: Import> => {

        handle_id_error(id_vec, &table)
    },
};

Overtone: Op = {
    "("
        <fm:Rational> ","
        <fa:Rational> ","
        <g:Rational> ","
        <p:Rational>
    ")"
    => Op::Compose { operations: vec! [
            Op::TransposeM { m: fm },
            Op::TransposeA { a: fa },
            Op::Gain { m: g },
            Op::PanA { a: p },
        ]
    }
}

Overtones = Comma<Overtone>;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Import: Vec<String> = {
    <a: Name>"."<b: Name> => vec![a, b],
    <a: Name> => vec![a]
}

Lets<T>: Vec<T> = {
  <v:(<T>)*> => v
};

Pipe<T>: Vec<T> = {
    <v:(<T> "|")+> <e:T?> => match e {
        None=> v,
        Some(e) => {
          let mut v = v;
          v.push(e);
          v
        }
    }
};

Compose = Pipe<Operation>;

Operations = Comma<Operation>;

Rational: Rational64 = {
    <n: Float> => f32_to_rational(n),
    <n: Int> => Rational64::new(n, 1),
    <n: Int> "/" <d:Int> => Rational64::new(n, d),
};

Name: String = <s:r"[a-z_$][a-zA-Z_$0-9]*"> => s.to_string();
Float: String = <s:r"-?(0|([1-9]\d*))\.\d+"> => s.to_string();
Int: i64 = <s:r"-?[0-9]+"> => i64::from_str(s).unwrap();
