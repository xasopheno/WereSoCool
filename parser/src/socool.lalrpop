use num_rational::{Rational64};
use std::str::FromStr;
use std::string::String;
use weresocool_ast::{
        Defs,
        Op,
        Op::*,
        Term,
        ASR,
        FunDef,
        ListOp,
        Indices, 
        Index,
};
use crate::parser::Init;
use crate::indices::{et, random_seed};
use crate::float_to_rational::helpers::*;

grammar<'defs, 'err>(
    defs: &'defs mut Defs,
);

pub SoCool: Init = {
  <init: Point>
  <l: LetDefs> => { init }
}

Point: Init = {
    "{"
         "f:" <f:Rational> ","
         "l:" <l:Rational> ","
         "g:" <g:Rational> ","
         "p:" <p:Rational>
    "}" ";"? => Init { f, l, g, p }
}

LetDefs = Lets<LetDef>;
LetDef: () = {
    <s: Name> "(" <vars: Comma<Name>>  ")" "=" "{" <o: Operation> "}" => {
         defs.terms.insert(
             s.clone(),
             Term::FunDef(FunDef {
                 name: s,
                 vars: vars,
                 term: Box::new(o)
             })
         );
        ()
    },

    <s: Name> "=" "{" <o: Operation> "}" => {
        defs.terms.insert(s.clone(), o); ()
    },

    <name: Name> "=" <list: List> => {
        defs.lists.insert(name.clone(), Term::Lop(list)); ()
    }
};


Operation: Term = {
    <op1: Operation> ">" "FitLength" <op2: ComposeOperation> => {
        Term::Op(
            Op::Compose { operations:
            vec![op1.clone(), Term::Op(WithLengthRatioOf { with_length_of: Box::new(op2), main: Box::new(op1) })]
        })
    },

    <op1: Operation> ">" "@" <name: Name> <op2: ComposeOperation> => {
        Term::Op(
            Focus {
                name: name,
                main: Box::new(op1.clone()),
                op_to_apply: Box::new(op2.clone()),
            }
        )
    },

    <op: ComposeOperation> => op,

    <list: List> => Term::Lop(list),

}

List: ListOp = {
  "List" "[" <operations: Operations> "]" => {
    ListOp::Const(operations)
  },

  "List" <name: Name> => {
    ListOp::Named(name)
  },

  "ET" "(" <n: Int> ")" => {
    ListOp::Const(et(n))
  },

  <listop: List> "@" "[" <indices: Indices> "]" => {
    ListOp::ListOpIndexed { list_op: Box::new(listop), indices}
  },
}

Indices: Indices = {
  <indices: Comma<Index>> => Indices(indices),
};

Index: Index = {
  <index: Int> => Index::Const { index: vec![index] },
  "(" <index: Comma<Int>> ")" => Index::Const { index },
  <start: Int?>":"<end: Int?> => { Index::Slice { start, end } },
  "Random" "(" <n: Int> <seed: ("," Int)?> ")" => {
      match seed {
        Some(seed) => {
          Index::Random { n, seed: seed.1 }
        },
        None => {
          Index::Random { n, seed: random_seed() }
        }
      }
  },
  <index: Index> "|" <term: Composeable> => Index::IndexAndTerm {index: Box::new(index), term},
} 

ComposeOperation: Term = {
    <ops: Pipe<Composeable>> => Term::Op(Compose { operations: ops }),
    <o: BaseOperation> => o,
}

Composeable: Term = {
  <base_operation: BaseOperation> => base_operation,
  <list: List> => Term::Lop(list),
}

BaseOperation: Term = {
    "(" <o: Operation> ")" => o,
    "AsIs" => Term::Op(AsIs {}),
    "Sine" => Term::Op(Sine {}),
    "Square" => Term::Op(Square {}),
    "Noise" => Term::Op(Noise {}),
    "Reverse" => Term::Op(Reverse {}),
    "Invert" => Term::Op(FInvert),
    "Repeat" <i: Int> => {
        let mut vec = Vec::new();
        for x in 0..i {
            vec.push(Term::Op(AsIs))
        }
        Term::Op(Sequence { operations: vec })
    },
    "AD" "("
        <attack:Rational> ","
        <decay: Rational> ","
        <decay_type: Int> ")" => { 
          let asr = if decay_type == 2 {ASR::Long} else {ASR::Short};
          Term::Op(AD {attack, decay, asr})
        },
    "Portamento" <v:Rational> => Term::Op(Portamento {m: v}),
    "Silence" <v:Rational> => Term::Op(Silence {m: v}),
    "Tm" <v:Rational> => Term::Op(TransposeM {m: v}),
    "Ta" <v:Rational> => Term::Op(TransposeA {a: v}),
    "PanM" <v:Rational> => Term::Op(PanM {m: v}),
    "PanA" <v:Rational> => Term::Op(PanA {a: v}),
    "Length" <v:Rational> => Term::Op(Length {m: v}),
    "Gain" <v:Rational> => Term::Op(Gain {m: v}),
    "Choice" "[" <operations: Operations> "]" => Term::Op(Choice { operations: operations }),
    "Sequence" "[" <operations: Operations> "]" => Term::Op(Sequence { operations: operations }),
    "Seq" "[" <operations: Operations> "]" => Term::Op(Sequence { operations: operations }),
    "Overlay" "[" <operations: Operations> "]" => Term::Op(Overlay { operations: operations }),
    "ModulateBy" "[" <operations: Operations> "]" => Term::Op(ModulateBy { operations: operations }),
    "O" "[" <o: Overtones> "]" => Term::Op(Overlay { operations: o }),
    <id: Name> => {
        Term::Op(Id(id))
    },
    "#"<name: Name> => Term::Op(Tag(name)),
    //
    <name: Name> "(" <args: Comma<Operation>>  ")" => {
        Term::Op(
            FunctionCall {
                name,
                args
            }
        )
    },
    <tm: Rational>"^"<length: Rational> => {
        Term::Op(Compose { operations: vec! [
            Term::Op(TransposeM { m: tm }),
            Term::Op(Length { m: length }),
        ]})
    },
};

Overtone: Term = {
    "("
        <fm:Rational> ","
        <fa:Rational> ","
        <g:Rational> ","
        <p:Rational>
    ")"
    => Term::Op(Compose { operations: vec! [
            Term::Op(TransposeM { m: fm }),
            Term::Op(TransposeA { a: fa }),
            Term::Op(Gain { m: g }),
            Term::Op(PanA { a: p }),
        ]
    })
}


Overtones = Comma<Overtone>;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Import: Vec<String> = {
    <a: Name>"."<b: Name> => vec![a, b],
    <a: Name> => vec![a]
}

Lets<T>: Vec<T> = {
  <v:(<T>)*> => v
};

Pipe<T>: Vec<T> = {
    <v:(<T> "|")+> <e:T?> => match e {
        None=> v,
        Some(e) => {
          let mut v = v;
          v.push(e);
          v
        }
    }
};


Compose = Pipe<Operation>;

Operations = Comma<Operation>;

Ints = Comma<Int>;

Rational: Rational64 = {
    <n: Float> => f32_to_rational(n),
    <n: Int> => Rational64::new(n, 1),
    <n: Int> "/" <d:Int> => Rational64::new(n, d),
};

Name: String = <s:r"[a-z_][a-zA-Z_0-9.]*"> => s.to_string();
Float: String = <s:r"-?(0|([1-9]\d*))\.\d+"> => s.to_string();
Int: i64 = <s:r"-?[0-9]+"> => i64::from_str(s).unwrap();
