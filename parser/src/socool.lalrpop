use num_rational::{Rational64};
use std::str::FromStr;
use std::string::String;
use socool_ast::{
    ast::{
        OpOrNfTable,
        Op,
        Op::*,
        OpOrNf,
        OpOrNf::*,
        is_choice_op,
    },
};
use crate::parser::Init;
use crate::float_to_rational::helpers::*;

grammar<'table, 'err>(
    table: &'table mut OpOrNfTable,
);

pub SoCool: Init = {
  <init: Point>
  <l: LetDefs> => { init }
}

Point: Init = {
    "{"
         "f:" <f:Rational> ","
         "l:" <l:Rational> ","
         "g:" <g:Rational> ","
         "p:" <p:Rational>
    "}" ";"? => Init { f, l, g, p }
}

LetDefs = Lets<LetDef>;
LetDef: () = {
    <s: Name> "(" <vars: Comma<Name>>  ")" "=" "{" <o: Operation> "}" => {
         table.insert(
             s.clone(),
             Op(FunctionDef {
                 name: s,
                 vars: vars,
                 op_or_nf: Box::new(o)
             })
         );
        ()
    },

    <s: Name> "=" "{" <o: Operation> "}" => {
        table.insert(s.clone(), o); ()
    }
};

Operation: OpOrNf = {
    <op1: Operation> ">" "FitLength" <op2: ComposeOperation> => {
        OpOrNf::Op(
            Op::Compose { operations:
            vec![op1.clone(), Op(WithLengthRatioOf { with_length_of: Box::new(op2), main: Box::new(op1) })]
        })
    },

    <op1: Operation> ">" "@" <name: Name> <op2: ComposeOperation> => {
        Op(
            Focus {
                name: name,
                main: Box::new(op1.clone()),
                op_to_apply: Box::new(op2.clone()),
            }
        )
    },

    <op1: Operation> ">" "LazyRepeat" <i: Int> => {
            let mut op = Op(AsIs);
            if is_choice_op(op1.clone(), table) {
                op = op1
            }
            let mut vec = Vec::new();
            for x in 0..i {
                vec.push(op.clone())
            }
            Op(Sequence { operations: vec })
        },

      <op: ComposeOperation> => op,
}

ComposeOperation: OpOrNf = {
    <ops: Pipe<BaseOperation>> => Op(Compose { operations: ops }),
    <o: BaseOperation> => o,
}

BaseOperation: OpOrNf = {
    "(" <o: Operation> ")" => o,
    "AsIs" => Op(AsIs {}),
    "Sine" => Op(Sine {}),
    "Square" => Op(Square {}),
    "Noise" => Op(Noise {}),
    "Reverse" => Op(Reverse {}),
    "Invert" => Op(FInvert),
    "Repeat" <i: Int> => {
        let mut vec = Vec::new();
        for x in 0..i {
            vec.push(Op(AsIs))
        }
        Op(Sequence { operations: vec })
    },
    "AD" "("
        <attack:Rational> ","
        <decay: Rational> ","
        <length: Int> ")" => Op(AD {attack, decay, length: length as usize}),
    "Silence" <v:Rational> => Op(Silence {m: v}),
    "Tm" <v:Rational> => Op(TransposeM {m: v}),
    "Ta" <v:Rational> => Op(TransposeA {a: v}),
    "PanM" <v:Rational> => Op(PanM {m: v}),
    "PanA" <v:Rational> => Op(PanA {a: v}),
    "Length" <v:Rational> => Op(Length {m: v}),
    "Gain" <v:Rational> => Op(Gain {m: v}),
    "Choice" "[" <operations: Operations> "]" => Op(Choice { operations: operations }),
    "Sequence" "[" <operations: Operations> "]" => Op(Sequence { operations: operations }),
    "Seq" "[" <operations: Operations> "]" => Op(Sequence { operations: operations }),
    "Overlay" "[" <operations: Operations> "]" => Op(Overlay { operations: operations }),
    "ModulateBy" "[" <operations: Operations> "]" => Op(ModulateBy { operations: operations }),
    "O" "[" <o: Overtones> "]" => Op(Overlay { operations: o }),
    <id: Name> => {
        Op(Id(id))
    },
    "#"<name: Name> => Op(Tag(name)),
    //
    <name: Name> "(" <args: Comma<Operation>>  ")" => {
        Op(
            FunctionCall {
                name,
                args
            }
        )
    },
    "$"<id: Name> => Op(Fid(id)),
    <tm: Rational>"^"<length: Rational> => {
        Op(Compose { operations: vec! [
            Op(TransposeM { m: tm }),
            Op(Length { m: length }),
        ]})
    }
};

Overtone: OpOrNf = {
    "("
        <fm:Rational> ","
        <fa:Rational> ","
        <g:Rational> ","
        <p:Rational>
    ")"
    => Op(Compose { operations: vec! [
            Op(TransposeM { m: fm }),
            Op(TransposeA { a: fa }),
            Op(Gain { m: g }),
            Op(PanA { a: p }),
        ]
    })
}


Overtones = Comma<Overtone>;

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Import: Vec<String> = {
    <a: Name>"."<b: Name> => vec![a, b],
    <a: Name> => vec![a]
}

Lets<T>: Vec<T> = {
  <v:(<T>)*> => v
};

Pipe<T>: Vec<T> = {
    <v:(<T> "|")+> <e:T?> => match e {
        None=> v,
        Some(e) => {
          let mut v = v;
          v.push(e);
          v
        }
    }
};

Compose = Pipe<Operation>;

Operations = Comma<Operation>;

Rational: Rational64 = {
    <n: Float> => f32_to_rational(n),
    <n: Int> => Rational64::new(n, 1),
    <n: Int> "/" <d:Int> => Rational64::new(n, d),
};

Name: String = <s:r"[a-z_][a-zA-Z_0-9]*"> => s.to_string();
Float: String = <s:r"-?(0|([1-9]\d*))\.\d+"> => s.to_string();
Int: i64 = <s:r"-?[0-9]+"> => i64::from_str(s).unwrap();
