{ f: 330, l: 1, g: 1, p: 0 }

-- If you had as much fun making cool chords as I do, you'll be happy to know
-- there's a short-hand for doing just that. 

--          This is O[] syntax:  O[(Fm, Fa, Gm, Pa), ...]

-- Inside of the O[], you can put as many (Fm, Fa, Gm, Pa)'s as you'd like. 
-- This can be a great way to compose multi-voice chords in a series 
-- or - as it's used in the song below - to add overtones to other operations. 

overtones = {
-- Here we're using O[]
-- O[(Fm, Fa, Gm, Pa), ...]
  O[
    (3/1, 1, 1/4, -1/4),
    (3/1, 0, 1/4, 1/4),
    (1/1, 2, 1, 1/2),
    (1/1, 0, 1, -1/2),
  ]
}

-- Here's a little two part song:
melody1 = {
  Seq [
    Fm 1, Fm 9/8, Fm 5/4 | Lm 2, Fm 9/8, Fm 1,
    Fm 3/2 | Lm 4, Fm 5/3, Fm 9/8
  ]
}

melody2 = {
  Seq [
    Fm 5/4, Fm 3/2, Fm 5/3 | Lm 2, Fm 3/2, Fm 4/3,
    Fm 9/8 | Lm 3/2, Fm 5/4 | Lm 3/2, Fm 4/3 | Lm 3 
  ]
  | Fm 1/2
}

main = {
-- "overtones" contains 4 voices defined above with O[] syntax.
-- by Piping it into the Overlay results in the same sound as
-- if we wrote the following:
-- Overlay [
--   overtones | melody1,
--   overtones | melody2
--]
  overtones
  | Overlay [
    melody1,
    melody2,
  ]
--  Then we play the melodies above, 
--  first at Fm 1 (where they would normally play),
--  then play it backwards using Reverse.
  | Seq [
    Fm 1, 
    Reverse
  ]
-- faster
  | Lm 2/5
-- 2x
  | Repeat 2 
-- quieter
  | Gm 1/3
}
-- *** Some operations are "no-ops". They act as an identity.
-- For example: 
--   cool | Fm 1 | Gm 1 | Lm 1 = cool